- name: Setup stateful services
  hosts: _manual
  become: true
  tasks:
    - name: Create a vault dir if it does not exist
      ansible.builtin.file:
        path: /vault
        state: directory
        mode: "0755"

    - name: Create a config dir if it does not exist
      ansible.builtin.file:
        path: /vault/volumes/config
        state: directory
        mode: "0755"

    - name: Create a file dir if it does not exist
      ansible.builtin.file:
        path: /vault/volumes/file
        state: directory
        mode: "0755"

    - name: Create a logs dir if it does not exist
      ansible.builtin.file:
        path: /vault/volumes/logs
        state: directory
        mode: "0755"

    - name: Copy file from host to machine
      copy:
        src: "{{ playbook_dir }}/docker-compose.yml"
        dest: /vault/docker-compose.yml

    - name: Copy file from host to machine
      copy:
        src: "{{ playbook_dir }}/vault.json"
        dest: /vault/volumes/config/vault.json

    - name: Create and start services
      community.docker.docker_compose:
        project_src: /vault/.
      register: output

    - debug:
        var: output

    - name: Add environment variables to .bashrc
      lineinfile:
        dest: /home/ansible/.bashrc 
        line: '"export VAULT_ADDR=http://{{ ansible_default_ipv4.address }}:8200" && . /home/ansible/.bashrc'
        insertafter: EOF
        state: present
        create: yes

- name: Automate Vault Setup
  hosts: localhost
  tasks:
    
    - name: Retrieve Vault status
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:8200/v1/sys/seal-status"
        method: GET
        return_content: yes
      register: vault_status_output

    - name: Check if Vault is initialized
      set_fact:
        vault_initialized: "{{ vault_status_output.json.initialized }}"
        vault_unlocked: "{{ vault_status_output.json.sealed }}"

    - name: Initialize Vault
      command: vault operator init -key-shares=6 -key-threshold=3
      register: init_output
      when: vault_initialized == false

    - name: Save initialization output to a file
      copy:
        content: "{{ init_output.stdout }}"
        dest: initialization-data.txt
      when: vault_initialized == false

    - name: Extract Unseal keys and Unlock Vault
      shell: |
        unseal_keys=$(grep "Unseal Key" initialization-data.txt)
        keys=()
        while IFS= read -r line; do
            if [[ $line =~ :[[:space:]]*(.*) ]]; then
                key="${BASH_REMATCH[1]}"
                echo "key: $key"
                keys+=("$key")
                vault operator unseal $key
            fi
        done <<< "$unseal_keys"
      args:
        executable: /bin/bash
      when: vault_initialized == true and vault_unlocked == true

    - name: Login to Vault
      shell: |
        root_token_text=$(grep "Initial Root Token" initialization-data.txt)
        if [[ $root_token_text =~ :[[:space:]]*(.*) ]]; then
                token="${BASH_REMATCH[1]}"
                vault login $token
        fi
      args:
        executable: /bin/bash

    - name: Retrieve Secret Engine Status
      shell: vault secrets list -format=json | jq '."secret/"'
      register: secrets_output

    - name: Check if Secret Engine is enabled
      set_fact:
        secrets_enabled: "{{ 'true' if secrets_output.stdout else 'false' }}"

    - name: Enable Secret Engine
      shell: vault secrets enable -version=2 -path=secret kv
      args:
        executable: /bin/bash
      when: secrets_enabled == "true"

    - name: Create Test Data in Vault
      community.hashi_vault.vault_kv2_write:
        path: prod/test
        data:
          x: y
    
    - name: Test Vault Setup
      set_fact: 
        test_result : "{{ lookup('hashi_vault', 'secret=secret/data/prod/test:x') }}"
      failed_when: test_result | length == 0
      args:
        executable: /bin/bash